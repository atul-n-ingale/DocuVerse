[tool.poetry]
name = "docuverse-backend"
version = "1.0.0"
description = "DocuVerse Backend - Document Universe API"
authors = ["DocuVerse Team <team@docuverse.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
fastapi = "~0.116.1"
uvicorn = {extras = ["standard"], version = "~0.35.0"}
celery = "~5.5.3"
redis = "*"
pymongo = "~4.13.2"
motor = "*"
python-multipart = "*"
python-dotenv = "*"
pydantic = "2.11.7"
pydantic-settings = "2.10.1"
websockets = "*"
llama-index = "0.12.49"
llama-index-embeddings-openai = "0.3.1"
llama-index-vector-stores-pinecone = "0.6.0"
openai = "1.96.0"
pinecone = "7.3.0"
pypdf2 = "*"
python-docx = "1.2.0"
pandas = "2.3.1"
openpyxl = "*"
pillow = "11.3.0"
pytesseract = "0.3.13"
aiofiles = "~24.1.0"
python-jose = {extras = ["cryptography"], version = "*"}
passlib = {extras = ["bcrypt"], version = "*"}
flower = "~2.0.1"
llama-index-core = "0.12.49"
llama-index-readers-file = "0.4.8"
llama-index-llms-openai = "0.4.7"
llama-index-agent-openai = "0.4.12"
llama-index-program-openai = "0.3.2"
llama-index-question-gen-openai = "0.3.1"
llama-index-multi-modal-llms-openai = "0.5.3"
llama-index-indices-managed-llama-cloud = "0.6.11"
llama-index-cli = "0.4.4"
llama-index-instrumentation = "0.2.0"
llama-cloud = "0.1.33"
llama-cloud-services = "0.6.46"
llama-parse = "0.6.46"
numpy = "2.3.1"
pypdf = "5.8.0"
fsspec = "2025.7.0"
tqdm = "4.67.1"
requests = "2.32.4"
beautifulsoup4 = "4.13.4"
striprtf = "0.0.26"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
httpx = "^0.28.0"

# Formatting and Linting
black = "^24.0.0"
isort = "^5.12.0"
ruff = "^0.4.0"
mypy = "^1.13.0"

# Type checking
types-requests = "^2.32.0"
types-PyYAML = "^6.0.12"
types-aiofiles = "^23.2.0"
types-redis = "^4.6.0"

# Documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.6.0"

# Development tools
pre-commit = "^4.0.0"
ipython = "^8.24.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["app"]
known_third_party = ["fastapi", "uvicorn", "celery", "redis", "pymongo", "motor", "pydantic", "websockets", "llama_index", "openai", "pinecone"]

# Ruff configuration (modern, fast linter)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "LOG", # flake8-logging-format
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy-vet
    "AIR", # flake8-airflow
    "PERF", # perflint
    "FURB", # refurb
    "C90", # mccabe
    "ICN", # isort
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "PLR0916", # too many boolean expressions
    "PLR0917", # too many boolean expressions
    "PLR0918", # too many boolean expressions
    "PLR0919", # too many boolean expressions
    "PLR0920", # too many boolean expressions
    "PLR0921", # too many boolean expressions
    "PLR0922", # too many boolean expressions
    "PLR0923", # too many boolean expressions
    "PLR0924", # too many boolean expressions
    "PLR0925", # too many boolean expressions
    "PLR0926", # too many boolean expressions
    "PLR0927", # too many boolean expressions
    "PLR0928", # too many boolean expressions
    "PLR0929", # too many boolean expressions
    "PLR0930", # too many boolean expressions
    "PLR0931", # too many boolean expressions
    "PLR0932", # too many boolean expressions
    "PLR0933", # too many boolean expressions
    "PLR0934", # too many boolean expressions
    "PLR0935", # too many boolean expressions
    "PLR0936", # too many boolean expressions
    "PLR0937", # too many boolean expressions
    "PLR0938", # too many boolean expressions
    "PLR0939", # too many boolean expressions
    "PLR0940", # too many boolean expressions
    "PLR0941", # too many boolean expressions
    "PLR0942", # too many boolean expressions
    "PLR0943", # too many boolean expressions
    "PLR0944", # too many boolean expressions
    "PLR0945", # too many boolean expressions
    "PLR0946", # too many boolean expressions
    "PLR0947", # too many boolean expressions
    "PLR0948", # too many boolean expressions
    "PLR0949", # too many boolean expressions
    "PLR0950", # too many boolean expressions
    "PLR0951", # too many boolean expressions
    "PLR0952", # too many boolean expressions
    "PLR0953", # too many boolean expressions
    "PLR0954", # too many boolean expressions
    "PLR0955", # too many boolean expressions
    "PLR0956", # too many boolean expressions
    "PLR0957", # too many boolean expressions
    "PLR0958", # too many boolean expressions
    "PLR0959", # too many boolean expressions
    "PLR0960", # too many boolean expressions
    "PLR0961", # too many boolean expressions
    "PLR0962", # too many boolean expressions
    "PLR0963", # too many boolean expressions
    "PLR0964", # too many boolean expressions
    "PLR0965", # too many boolean expressions
    "PLR0966", # too many boolean expressions
    "PLR0967", # too many boolean expressions
    "PLR0968", # too many boolean expressions
    "PLR0969", # too many boolean expressions
    "PLR0970", # too many boolean expressions
    "PLR0971", # too many boolean expressions
    "PLR0972", # too many boolean expressions
    "PLR0973", # too many boolean expressions
    "PLR0974", # too many boolean expressions
    "PLR0975", # too many boolean expressions
    "PLR0976", # too many boolean expressions
    "PLR0977", # too many boolean expressions
    "PLR0978", # too many boolean expressions
    "PLR0979", # too many boolean expressions
    "PLR0980", # too many boolean expressions
    "PLR0981", # too many boolean expressions
    "PLR0982", # too many boolean expressions
    "PLR0983", # too many boolean expressions
    "PLR0984", # too many boolean expressions
    "PLR0985", # too many boolean expressions
    "PLR0986", # too many boolean expressions
    "PLR0987", # too many boolean expressions
    "PLR0988", # too many boolean expressions
    "PLR0989", # too many boolean expressions
    "PLR0990", # too many boolean expressions
    "PLR0991", # too many boolean expressions
    "PLR0992", # too many boolean expressions
    "PLR0993", # too many boolean expressions
    "PLR0994", # too many boolean expressions
    "PLR0995", # too many boolean expressions
    "PLR0996", # too many boolean expressions
    "PLR0997", # too many boolean expressions
    "PLR0998", # too many boolean expressions
    "PLR0999", # too many boolean expressions
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "PLR2004", "PLR0913", "PLR0915"]

# Mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

# Exclude patterns
exclude = [
    "build",
    "dist",
    "node_modules",
    ".venv",
    "venv",
    "env",
    "__pycache__",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".pytest_cache",
    ".mypy_cache",
    ".coverage",
    "htmlcov",
    "tests",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "llama_index.*",
    "pinecone.*",
    "motor.*",
    "pymongo.*",
    "redis.*",
    "celery.*",
    "flower.*",
    "pytesseract.*",
    "PIL.*",
    "pdfplumber.*",
    "pymupdf.*",
    "openpyxl.*",
    "python_docx.*",
    "pandas.*",
    "numpy.*",
    "requests.*",
    "beautifulsoup4.*",
    "striprtf.*",
    "aiofiles.*",
    "python_jose.*",
    "passlib.*",
    "websockets.*",
    "uvicorn.*",
    "fastapi.*",
    "pydantic.*",
    "pydantic_settings.*",
    "python_multipart.*",
    "python_dotenv.*",
    "tqdm.*",
    "fsspec.*",
    "pypdf.*",
    "pypdf2.*",
    "llama_cloud.*",
    "llama_cloud_services.*",
    "llama_parse.*",
    "llama_index_core.*",
    "llama_index_readers_file.*",
    "llama_index_llms_openai.*",
    "llama_index_agent_openai.*",
    "llama_index_program_openai.*",
    "llama_index_question_gen_openai.*",
    "llama_index_multi_modal_llms_openai.*",
    "llama_index_indices_managed_llama_cloud.*",
    "llama_index_cli.*",
    "llama_index_instrumentation.*",
    "llama_index_embeddings_openai.*",
    "llama_index_vector_stores_pinecone.*",
]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --cov=app --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

 